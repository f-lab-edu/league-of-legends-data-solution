version: '3.4'

services:

  kafka-worker-01:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka-worker-01
    container_name: kafka-worker-01
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-worker-01:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      placement:
        constraints:
          - node.labels.kafka==1
      resources:
        reservations:
          cpus: '0.3'
          memory: '2G'
        limits:
          cpus: '0.5'
          memory: '3G'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - kafka-worker-01-log:/tmp/kafka-logs
      - kafka-worker-01:/kafka
    networks:
      - backend
        
  kafka-worker-02:                                         
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka-worker-02
    container_name: kafka-worker-02
    ports:
      - 9093:9093
      - 29093:29093                                                                                                           
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-worker-02:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      placement:
        constraints:
          - node.labels.kafka==2
      resources:
        reservations:
          cpus: '0.3'
          memory: '2G'
        limits:
          cpus: '0.5'
          memory: '3G'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - kafka-worker-02-log:/tmp/kafka-logs
      - kafka-worker-02:/kafka
    networks:
      - backend


  kafka-worker-03:                                                                                                                    
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka-worker-03
    container_name: kafka-worker-03
    ports:
      - 9094:9094
      - 29094:29094                                                                                                                
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-worker-03:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      placement:
        constraints:
          - node.labels.kafka==3
      resources:
        reservations:
          cpus: '0.3'
          memory: '2G'
        limits:
          cpus: '0.5'
          memory: '3G'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - kafka-worker-03-log:/tmp/kafka-logs
      - kafka-worker-03:/kafka
    networks:
      - backend

  kafka-manager:
    image: sheepkiller/kafka-manager
    environment:
      ZK_HOSTS: "zoo1:2181,zoo2:2181,zoo3:2181"
      APPLICATION_SECRET: ${KAFKA_MANAGER_PASSWORD:-test}
    deploy:
      placement:
        constraints:
          - node.role == manager
    ports:
      - 9001:9000
    networks:
      - backend

volumes:
  kafka-worker-01-log:
  kafka-worker-02-log:
  kafka-worker-03-log:
  kafka-worker-01:
  kafka-worker-02:
  kafka-worker-03:

networks:
  backend:
    external:
      name: ${NETWORK_BACKEND:-kafka}
  monitor:
    external:
      name: ${NETWORK_MONITOR:-monitoring}
